@page "/AdminOrders"
@inject IOrderService orderService
@inject NavigationManager NavMgr
@using Entities
@using Contracts
<AuthorizeView>
    <Authorized>

        @if (orders == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!orders.Any())
        {
            <p>
                <em>Nobody here, please find some friends.</em>
            </p>
        }
        else
        {
            
            <div class="container">
                <ul class="responsive-table">
                    <li class="table-header">
                                         <div class="col col-1">ID<input type="text" minlength="3" maxlength="32" @bind="@newOrderItem.orderId" @oninput="@((e) => { newOrderItem.orderId=Convert.ToInt32(e.Value);})" /></div>
                                         <div class="col col-2">customerId<input type="text" minlength="3" maxlength="32" @bind="@newOrderItem.customerId" @oninput="@((e) => { newOrderItem.customerId=Convert.ToInt32(e.Value);})" /></div>
                                         <div class="col col-3">Price<input type="text" minlength="3" maxlength="32" @bind="@newOrderItem.price" @oninput="@((e) => { newOrderItem.price=Convert.ToInt32(e.Value);})" /></div>
                                         <div class="col col-4">Completed<br/><input type="checkbox" minlength="3" maxlength="32" @bind="@newOrderItem.completed" @oninput="@((e) => { newOrderItem.completed=(bool)e.Value;})" /></div>

                                         <div class="col col-8">
                                            <p class="actions">
                                                        <button class="button" type="submit" @onclick="()=>UpdateUser(newOrderItem)" ><span>Change</span></button>
                                                    </p>
                                         </div>
                                     </li>

                @foreach (Order TableOrder in orders)
                {                   
                    <li class="table-row" @onclick="()=>SelectOrder(TableOrder)">
                                        <div class="col col-1">@TableOrder.orderId</div>
                                        <div class="col col-2">@TableOrder.customerId</div>
                                        <div class="col col-3">@TableOrder.price</div>
                                        <div class="col col-4">@TableOrder.completed</div>

                                        <div class="col col-8">
                                            <p class="actions">
                                                <button class="buttonD" @onclick="() => RemoveOrder(TableOrder.orderId)"><span>x</span></button>
                                            </p>
                                        </div>
                                    </li>
                }
                </ul>
            </div>
        }

    </Authorized>
            <NotAuthorized>
                <h2>Please Login to see this page</h2>
            </NotAuthorized>
</AuthorizeView>
@code {
    private IList<Order> orders;
    private Order newOrderItem = new Order();

    protected override async Task OnInitializedAsync()
    {
        orders = await orderService.GetAllOrdersAsync();
    }
    private void SelectOrder(Order SelectedOrder)
    {
        newOrderItem = SelectedOrder;
    }
    private async Task RemoveOrder(int userId)
    {
        await orderService.DeleteOrderByIdAsync(userId);
        NavMgr.NavigateTo("/AdminOrders",true);
    }
    private async Task UpdateUser(Order toBeUpdated)
    {
        await orderService.UpdateOrderAsync(toBeUpdated);
        NavMgr.NavigateTo("/AdminOrders",true);
    }
}