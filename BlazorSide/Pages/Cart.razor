@page "/Cart"
@using Entities
@using Contracts
@using System.Collections
@using BlazorSide.Authentification
@inject IAuthService authService
@inject IOrderService _orderService
@inject IProductService _productService
@inject NavigationManager _navMgr

<AuthorizeView>
<Authorized>

<!--TODO: Add order history at the bottom -->
@if (orders == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (orders.Count==0)
{
    <p>
        <em>No orders exist.</em>
    </p>
}
else
{
    <div class="container">
     <ul class="responsive-table">
    @foreach (Order o in orders)
        {
            if (!o.isCompleted)
            {
                <li class="table-header">
                    <div class="col col-1">Name</div>
                    <div class="col col-2">Brand</div>
                    <div class="col col-3">Description</div>
                    <div class="col col-4">Value</div>
                </li>
    foreach (Product tableProduct in o.products)
    {

        
        <li class="table-row" @onclick="()=>SelectProduct(tableProduct)">
            <div class="col col-1">@tableProduct.name</div>
            <div class="col col-2">@tableProduct.brand</div>
            <div class="col col-3">@tableProduct.description</div>
            <div class="col col-4">@tableProduct.value</div>
            
            <div class="col col-8">
                <p class="actions">
                    <button class="buttonD" @onclick="() => RemoveProductFromOrder(tableProduct.productId)"><span>x</span></button>
                </p>
            </div>
        </li>
    }
    <button class="button" @onclick="()=>Purchase(o)">Pruchase</button>
    break;
    }
    }
</ul>
</div>
}
</Authorized>
<NotAuthorized>
    Not logged in? Click <a href="Login">here</a> to login
</NotAuthorized>
</AuthorizeView>

@code {
    
    private IList<Order> orders;
    private Product newProductItem = new Product();
    Order order = null;
    
    private async Task RemoveProductFromOrder(Order order, Product product)
    {
        order.products.Remove(product);
       await _orderService.UpdateOrderAsync(order);
    }
    private async Task Purchase(Order order)
    {
        await _orderService.RequestPurchase(order);
        //TODO: Create landing page for customer who made a purchase
    }
    protected override async Task OnInitializedAsync()
    {
        orders = await _orderService.GetAllOrdersFromUser(3);
    //orders = await orderService.GetOrderById(@authService.GetAuthAsync().Id);
    }
    private void SelectProduct(Product selectedProduct)
    {
        newProductItem = selectedProduct;
    }
    private async Task RemoveProductFromOrder(int productId)
    {
        order.products.RemoveAt(order.products.Count);
        await _orderService.UpdateOrderAsync(order);
    //await _productService.RemoveProductFromOrder(productId,3);
        _navMgr.NavigateTo(_navMgr.Uri,true);
    }
    private void OpenOrder(int id)
    {
        _navMgr.NavigateTo($"/UserOrder/{id}");
    }
}