@page "/AdminUsers"
@using Entities
@using Contracts
@inject IUserService UserServe
@inject NavigationManager NavMgr
<AuthorizeView>
    <Authorized>

        @if (users == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!users.Any())
        {
            <p>
                <em>Nobody here, please find some friends.</em>
            </p>
        }
        else
        {
            
            <div class="container">
                <ul class="responsive-table">
                    <li class="table-header">
                                         <div class="col col-1">Username<input type="text" minlength="3" maxlength="32" @bind="@newUserItem.userName" @oninput="@((e) => { newUserItem.userName=(string)e.Value;})" /></div>
                                         <div class="col col-2">Password<input type="text" minlength="3" maxlength="32" @bind="@newUserItem.password" @oninput="@((e) => { newUserItem.password=(string)e.Value;})" /></div>
                                         <div class="col col-3">FirsName<input type="text" minlength="3" maxlength="32" @bind="@newUserItem.firstName" @oninput="@((e) => { newUserItem.firstName=(string)e.Value;})" /></div>
                                         <div class="col col-4">LastName<input type="text" minlength="3" maxlength="32" @bind="@newUserItem.lastName" @oninput="@((e) => { newUserItem.lastName=(string)e.Value;})" /></div>
                                         <div class="col col-5">Email<input type="text" minlength="6" maxlength="128" @bind="@newUserItem.email" @oninput="@((e) => { newUserItem.email=(string)e.Value;})" /></div>
                                         <div class="col col-6">Security<input type="number" max="11" @bind="@newUserItem.SecurityLevel" @oninput="@((e) => { newUserItem.SecurityLevel=Convert.ToInt32(e.Value);})" /></div>
                                         <div id="UserID" class="col col-7" >UserID<input type="number" @bind="@newUserItem.userId" @oninput="@((e) => { newUserItem.userId=Convert.ToInt32(e.Value);})" /></div>
                                         <div class="col col-8">
                                            <p class="actions">
                                                        <button class="button" type="submit" @onclick="()=>UpdateUser(newUserItem)" ><span>Change</span></button>
                                                    </p>
                                         </div>
                                     </li>
     

                    

                @foreach (User TableUser in users)
                {                   
                    <li class="table-row" @onclick="()=>SelectUser(TableUser)">
                                        <div class="col col-1">@TableUser.userName</div>
                                        <div class="col col-2">@TableUser.password</div>
                                        <div class="col col-3">@TableUser.firstName</div>
                                        <div class="col col-4">@TableUser.lastName</div>
                                        <div class="col col-5">@TableUser.email</div>
                                        <div class="col col-6">@TableUser.SecurityLevel</div>
                                        <div id="UserID" class="col col-7" >@TableUser.userId</div>
                                        <div class="col col-8">
                                            <p class="actions">
                                                <button class="buttonD" @onclick="() => RemoveUser(TableUser.userId)"><span>x</span></button>
                                            </p>
                                        </div>
                                    </li>
                }
                </ul>
            </div>
        }

    </Authorized>
            <NotAuthorized>
                <h2>Please Login to see this page</h2>
            </NotAuthorized>
</AuthorizeView>
@code {
        
    private IList<User> users;
    private User newUserItem = new User();

    protected override async Task OnInitializedAsync()
    {
        users = await UserServe.GetAsync();
    }
    private void SelectUser(User SelectedUser)
    {
        newUserItem = SelectedUser;
    }
    private async Task RemoveUser(int userId)
    {
        await UserServe.DeleteAsync(userId);
        NavMgr.NavigateTo("/AdminUsers",true);
    }
    private async Task UpdateUser(User toBeUpdated)
    {
        await UserServe.UpdateAsync(toBeUpdated);
        NavMgr.NavigateTo("/AdminUsers",true);
    }
}